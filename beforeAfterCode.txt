Here's what was there before (under the adj. calculator):
// adjacency right
if (col + 1 < numColumns) {
	if (getCellAt(row, col + 1).isWalkway()) {
		tempList.add(getCellAt(row, col + 1));
	}
	else if (getRoomCellAt(row, col + 1).getDoorDirection() == RoomCell.DoorDirection.LEFT) {
		tempList.add(getRoomCellAt(row, col + 1));
	}
}
// adjacency down
if (row + 1 < numRows) {
	if (getCellAt(row + 1, col).isWalkway()) {
		tempList.add(getCellAt(row + 1, col));
	}
	else if (getRoomCellAt(row + 1, col).getDoorDirection() == RoomCell.DoorDirection.UP) {
		tempList.add(getRoomCellAt(row + 1, col));
	}
}
// adjacency left
if (col - 1 >= 0) {
	if (getCellAt(row, col - 1).isWalkway()) {
		tempList.add(getCellAt(row, col - 1));
	}
	else if (getRoomCellAt(row, col - 1).getDoorDirection() == RoomCell.DoorDirection.RIGHT) {
		tempList.add(getRoomCellAt(row, col - 1));
	}
}
// adjacency up
if (row - 1 >= 0) {
	if (getCellAt(row - 1, col).isWalkway()) {
		tempList.add(getCellAt(row - 1, col));
	}
	else if (getRoomCellAt(row - 1, col).getDoorDirection() == RoomCell.DoorDirection.DOWN) {
		tempList.add(getRoomCellAt(row - 1, col));
	}
}

I thought it was a bit dry, so I created the following:
for(int i = 0; i < 4; i++){
	int pmInd = i%2;
	int rc, rm, cm;
	if(i >= 2){
		if(pmInd == 0){
			rc = col;
			rm = 0;
			cm = -1;
		}
		else{
			rc = row;
			rm = -1;
			cm = 0;
		}
		if(rc - 1 >= 0){
			if (getCellAt(row + rm, col + cm).isWalkway()) {
				tempList.add(getCellAt(row + rm, col + cm));
			}
			else if (getRoomCellAt(row + rm, col + cm).getDoorDirection() 
				== RoomCell.direction[i]) {
				tempList.add(getRoomCellAt(row + rm, col + cm));
			}
		}
	}
	else{
		int num = 0;
		if(pmInd == 0){
			rc = col;
			num = numColumns;
			rm = 0;
			cm = 1;
		}
		else{
			rc = row;
			num = numRows;
			rm = 1;
			cm = 0;
		}
		if(rc + 1 < num){
			if (getCellAt(row + rm, col + cm).isWalkway()) {
				tempList.add(getCellAt(row + rm, col + cm));
			}
			else if (getRoomCellAt(row + rm, col + cm).getDoorDirection() 
				== RoomCell.direction[i]) {
				tempList.add(getRoomCellAt(row + rm, col + cm));
			}
		}
	}
}
Where direction[] = {LEFT, UP, RIGHT, DOWN}
Upon thinking about it, I've decided to leave the original in. Both compile the same results, and despite the
	original being a little repetative, it's far easier to read; that's why I'm leaving it. I tried to
	refactor it.